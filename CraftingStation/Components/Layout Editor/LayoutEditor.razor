@using CraftingStation.Components.Layout_Editor.Components
@using CraftingStation.Components.Layout_Editor.Data
@using CraftingStation.Components.Layout_Editor.Editors
@using System.Text.Json
<TelerikCheckBox @bind-Value="editorData.Edit" />
<TelerikButton OnClick="() => StateHasChanged()">Aktualisieren</TelerikButton>

@if (this.editorData.Edit) {
    <TelerikToolBar>
        <ToolBarButton OnClick="addFlexBox">Add Flex</ToolBarButton>
        <ToolBarButton OnClick="addFlexBoxItem">Add Flex-Item</ToolBarButton>
        <ToolBarButton OnClick="addDiv">Add div</ToolBarButton>
        <ToolBarButton OnClick="addCard">Add Card</ToolBarButton>
        <ToolBarButton OnClick="deleteComponent">Delete</ToolBarButton>
        <ToolBarButton OnClick="toJson">ToJson</ToolBarButton>

        @if (selectedEditorExtension != null) {

            <CascadingValue Value="editorData">
                <DynamicComponent @ref="selectedEditorExtension.DynamicComponent" Type="selectedEditorExtension.Type" Parameters="selectedEditorExtension.Parameters" />
            </CascadingValue>
        }

    </TelerikToolBar>

}

<CascadingValue Value="editorData">
    <BaseContainer Container="container" />
</CascadingValue>

<style>
    .content-container {
        display: flex;
        flex-direction: column;
        gap: 16px;
        margin-top: 12px;
    }

    .selectable-div {
        padding: 16px;
        border: 1px dashed rgba(0, 0, 0, 0.1);
        transition: background-color 0.2s ease, border-color 0.2s ease;
    }

    .selection-active:not(:has(.selection-active:hover)):hover {
        outline: 2px solid #0078d4;
        background-color: rgba(0, 120, 212, 0.1);
        cursor: pointer;
    }

    /* Show a distinct style for selected */
    .selected {
        background-color: rgba(0, 120, 212, 0.2);
        border-color: #0078d4;
    }
</style>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    private ContainerData container = new ContainerData(null); // cant be type of FlexBox
    // private ContainerData container => editorComponentData.Component as ContainerData;

    private EditorData editorData = new EditorData();
    private ComponentData selectedEditorExtension => getSelectedEditor();
    private ComponentData selectedComponent => editorData?.SelectedComponent;

    Dictionary<Type, EditorComponentData> lookup = new Dictionary<Type, EditorComponentData>();



    protected override void OnInitialized() {
        base.OnInitialized();
        editorData.EditorDataChanged += refresh;

        lookup.Add(typeof(FlexBoxContainer), new EditorComponentData(new ContainerData(typeof(FlexBoxContainer)),
                                                            typeof(FlexBoxContainerEditor),
                                                            new ContainerData(typeof(FlexBoxItem))));
        lookup.Add(typeof(Components.Div), new EditorComponentData(new ComponentData(typeof(Components.Div))));
        lookup.Add(typeof(FlexBoxItem), new EditorComponentData(new ContainerData(typeof(FlexBoxItem)), typeof(FlexBoxItemEditor), null));
        lookup.Add(typeof(Card), new EditorComponentData(new ContainerData(typeof(Card))));


        if (!string.IsNullOrEmpty(LayoutService.LayoutString)) {
            var dto = JsonSerializer.Deserialize
<SerializableComponentData>
    (LayoutService.LayoutString);
            ComponentData root = dto.ToComponentData();
            container = root as ContainerData;
        }
    }

    private void addFlexBox() {
        // EditorComponentData flexBox = new EditorComponentData(new ContainerData(typeof(FlexBoxContainer)),
        //                                                     typeof(FlexBoxContainerEditor),
        //                                                     new ContainerData(typeof(FlexBoxItem)));
        this.addComponent(new ContainerData(typeof(FlexBoxContainer)));
    }

    private void addFlexBoxItem() {
        // EditorComponentData flexBoxItem = new EditorComponentData(new ContainerData(typeof(FlexBoxItem)), typeof(FlexBoxItemEditor), null);
        this.addComponent(new ContainerData(typeof(FlexBoxItem)));
    }

    private void addDiv() {
        // EditorComponentData div = new EditorComponentData(new ComponentData(typeof(Components.Div)));
        this.addComponent(new ComponentData(typeof(Components.Div)));
    }

    private void addCard() {
        this.addComponent(new ContainerData(typeof(Card)));
    }

    private void deleteComponent() {
        if (selectedComponent != null) {
            ContainerData parent = (ContainerData)selectedComponent.Parent; // bad change
            var toRemove = parent?.Children
            .FirstOrDefault(c => c.ID == selectedComponent.ID);
            parent?.Children.Remove(toRemove);
            editorData.SelectedComponent = null;
        }
    }

    private void addComponent(ComponentData newComponent) {
        // EditorComponentData newComponentData = lookup[type];

        if (selectedComponent != null && selectedComponent is ContainerData parent && selectedComponent != container) {

            EditorComponentData parentEditor = lookup[selectedComponent.Type];

            if (newComponent is not ContainerData && newComponent is ComponentData && parentEditor.ChildComponent != null) {
                // add flexboxitem
                ContainerData c = new ContainerData(parentEditor.ChildComponent.Type);
                // add children
                c.Parent = parent;
                newComponent.Parent = c;
                c.Children.Add(newComponent);
                parent.Children.Add(c);
            } else {
                newComponent.Parent = parent;
                parent.Children.Add(newComponent);
            }
            // newComponent.Parent = parent;
            // parent.Children.Add(newComponent);

        } else {
            newComponent.Parent = container;
            this.container.Children.Add(newComponent);
        }
    }

    private void addComponent(ComponentData newComponent, ComponentData parent) {
        if (parent != null && parent is ContainerData containerData) {

        } else {

        }
    }

    private void refresh(object sender, EditorData data) {
        StateHasChanged();
    }

    private ComponentData getSelectedEditor() {
        if (editorData == null || editorData.SelectedComponent == null) {
            return null;
        }

        if (editorData.SelectedComponent.Type == null) {
            return null;
        }

        if (lookup.ContainsKey(editorData.SelectedComponent.Type)) {
            return lookup[editorData.SelectedComponent.Type].EditorExtensionComponent;
        }

        return null;
    }

    private void toJson() {
        var options = new JsonSerializerOptions {
            WriteIndented = true // makes it pretty-printed
        };

        string json = JsonSerializer.Serialize(container.ToSerializable(), options);
        LayoutService.LayoutString = json;
    }
}
